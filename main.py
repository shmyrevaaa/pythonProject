import numpy as np
import cv2 as cv
X= cv.imread('C:/imgs/image.jpg')
X= cv.cvtColor(X, cv.COLOR_BGR2GRAY)
cv.imshow('image', X)
cv.waitKey()
h=float(input('введите размер маски = '))
# X=np.ones((1, 3))  # исходное изображение
A1 = input('введите коэффициент для подъема = ')  # коэффициент для подъема центральной апертуры
A2 = input('введите увеличения центрального элемента = ')  # коэффициент для увеличения центрального элемента матрицы на заданное значение

# ---------------------------------------------------------------------------—
# —— РЕЦИРКУЛЯТОРЫ ——

t1 = 3  # начальное значение
k = (h - t1) / 2  # разница между полученным и начальным
t1 = t1 + k  # результат строчного рециркулятора
t2 = t1 - 2  # результат кадрового рециркулятора

# —-------— ОСНОВНАЯ МАТРИЦА —--------—

Y1 = np.ones((1, 3))
i1 = X.size[1]
j1 = X.size[0]
i2 = Y1.size[1]
j2 = Y1.size[1]
nuliki1=np.zeros((j1,i2-1))
X1=np.hstack(( X, nuliki1))
k = j1
m = i1 + (i2 - 1)
y1 = np.zeros((k, m))
for k in range(1, j1):
    for m in range(1, i1 + (i2 - 1)):
        if m == 1:
            y1 = X1
        if m > 1 and m < i2 + 1:
            y1 = X1 + y1

    if m - i2 >= 1:
        y1 = X1 - X1 + y1

    if m == 2:
        y1 = y1
# print(t2)
Y2 = np.ones((1, 3))
i1 = y1.size[1]
j1 = y1.size[0]
i2 = Y2.size[1]
j2 = Y2.size[0]
nuliki2 = np.zeros((j1, i2 - 1))
X2 = np.hstack((y1, nuliki2))
k = j1
m = i1 + (i2 - 1)
y2 = np.zeros((k, m))
for k in range(1, j1):
    for m in range(1, i1 + (i2 - 1)):
        if m == 1:
            y2 = X2

        if m > 1 and m < i2 + 1:
            y2 = X2 + y2

        if m - i2 >= 1:
            y2 = X2 - X2 + y2

    if m == 2:
        y2 = y2

Y3 = np.ones((1, 3))
i1 = y2.size[1]
j1 = y2.size[0]
i2 = Y3.size[1]
j2 = Y3.size[0]
nuliki3 = np.zeros((j1, i2 - 1))
X3 = np.hstack((y2, nuliki3))
k = j1
m = i1 + (i2 - 1)
y3 = np.zeros((k, m))
for k in range(1, j1):
    for m in range(1, i1 + (i2 - 1)):
        if m == 1:
            y3 = X3

        if m > 1 and m < i2 + 1:
            y3 = X3 + y3

        if m - i2 >= 1:
            y3 = X3 - X3 + y3
        if m == 2:
            y3 = y3

Y4 = np.ones((1, 3))
i1 = y3.size[1]
j1 = y3.size[0]
i2 = Y4.size[1]
j2 = Y4.size[0]
X4 = np.zeros((j1 + (j2 - 1), i1))
X4 = y3
k = j1 + (j2 - 1)
m = i1
y4 = np.zeros((k, m))
for k in range(1, j1 + (j2 - 1)):
    for m in range(1, i1):
        if k == 1:
            y4 = X4

        if k > 1 and k < j2 + 1:
            y4 = X4 + y4

        if k - j2 >= 1:
            y4 = X4 - X4 + y4
    if m == 2:
        y4 = y4
Y5 = np.ones((3, 1))
i1 = y4.size[1]
j1 = y4.size[0]
i2 = Y5.size[1]
j2 = Y5.size[0]
X5 = np.zeros((j1 + (j2 - 1), i1))
X5 = y4;
k = j1 + (j2 - 1)
m = i1
y5 = np.zeros((k, m))
for k in range(1, j1 + (j2 - 1)):
    for m in range(1, i1):

        if k == 1:
            y5 = X5

        if k > 1 and k < j2 + 1:
            y5 = X5 + y5

        if k - j2 >= 1:
            y5 = X5 - X5 + y5

Y6 = np.ones((3, 1))
i1 = y5.size[1]
j1 = y5.size[0]
i2 = Y6.size[1]
j2 = Y6.size[0]
X6 = np.zeros((j1 + (j2 - 1), i1))
X6 = y5
k = j1 + (j2 - 1)
m = i1
y6 = np.zeros((k, m))
for k in range(1, j1 + (j2 - 1)):
    for m in range(1, i1):

        if k == 1:
            y6 = X6

        if k > 1 and k < j2 + 1:
            y6 = X6 + y6

        if k - j2 >= 1:
            y6 = X6 - X6 + y6
        if m == 2:
            y6 = y6
S1 = sum(y6)
S1 = sum(S1, 2)

# ----------------------— КОЭФФ ?Ц ?ЕНТ СДВ ?ГА —--------------------—

k = h + 1  # приведение к четности
if k % 4 == 0:  # если делится без остатка на 4
    q = k / 4  # то поделить на 4, это будет отве
else:
    q = (k + 2) / 4  # если не делится на 4, то привести к возможности деления и поделить
q1 = q + 1

# ----------------------— РАЗМЕР ВНУТРЕННЕЙ МАТР ?ЦЫ —-------------—

if t2 % 2 == 0:  # если делится без остатка на 2
    p = t2 - 1
else:
    p = t2  # если не делится на 2, то привести к возможности деления и поделить

# ---------------------СР и КР для внутренней маски-------------------------—


k = h + 1  # приведение к четности
if k % 4 == 0:  # если делится без остатка на 4
    t3 = k / 4  # то поделить на 4, это будет ответ
else:
    t3 = (k - 2) / 4  # если не делится на 4, то привести к возможности деления и поделить
# -------------------------ДОП МАТР ?ЦА--------------------------------—

R = 1
# print(t3)
for u in range(0, 1):
    Y7 = np.ones((1, 2))  # Строчный рециркулятор при М=2
    X7 = X * R  # Множитель из структурной схемы к которому Добавляеся коэффициент А1
    i1 = X.size[1]  # количесвто стобцов в Х0 матрице
    j1 = X.size[0]  # количество строк в X0 матрице
    i2 = Y7.size[1]  # колчиество
    # столбцов во Y0 матрице
    j2 = Y7.size[0]  # количество строк во Y0 матрице
    nuliki4 = np.zeros((j1, i2 - 1))
    X7 = np.hstack((X, nuliki4))  # Матрица Х0 дополненая нулями с
    # правой стороны
    k = j1
    m = i1 + (i2 - 1)
    y7 = np.zeros((k, m))
for k in range(1, j1):  # выбор строки обработки
    for m in range(1, i1 + (i2 - 1)):  # выбор стлобца обработки
        # условие когда выходное изображение еще не сформированно
        if m == 1:
            y7 = X7

    # задержка равна 0 имеется только входное и выходное значение
    if m > 1 and m < i2 + 1:
        y7 = X7 + y7

    # Общее уравнение рециркулятора по строке
    if m - i2 >= 1:
        y7 = X7 - X7 + y7
    if m == 2:
        y7 = y7  # Матрица после строчного рециркулятора при М=2

Y8 = np.ones((1, 2))  # Строчный рециркулятор при М=2
i1 = y7.size[1]  # количесвто стобцов в Х0 матрице
j1 = y7.size[0]  # количество строк в X0 матрице
i2 = Y8.size[1]  # колчиество столбцов во Y0 матрице
j2 = Y8.size[0]  # количество строк во Y0 матрице
nuliki5 = np.zeros((j1, i2 - 1))
X8 = np.hstack((y7, nuliki5))  # Матрица Х0 дополненая нулями с правой стороны
k = j1
m = i1 + (i2 - 1)
y8 = np.zeros((k, m))
for k in range(1, j1):  # выбор строки обработки
    for m in range(1, i1 + (i2 - 1)):  # выбор стлобца обработки
        # условие когда выходное изображение еще не сформированно
        if m == 1:
            y8 = X8

        # задержка равна 0 имеется только входное и выходное значение
        if m > 1 and m < i2 + 1:
            y8 = X8 + y8

        # Общее уравнение рециркулятора по строке
        if m - i2 >= 1:
            y8 = X8 - X8 + y8
        if m == 2:
            y8 = y8  # Матрица после строчного рециркулятора при М=2

Y9 = np.ones((2, 1))  # Кадровый рециркулятор при М=2
i1 = y8.size[1]  # количесвто стобцов в у0 матрице
j1 = y8.size[0]  # количество строк в у0 матрице
i2 = Y9.size[1]  # колчиество столбцов во Y1 матрице
j2 = Y9.size[0]  # количество строк во Y1 матрице
X9 = np.zeros((j1 + (j2 - 1), i1))  # матрица нулевая
X9 = y8  # матрица у0 окруженная нулями
k = j1 + (j2 - 1)
m = i1
y9 = np.zeros((k, m))
for k in range(1, j1 + (j2 - 1)):  # выбор строки обработки
    for m in range(1, i1):  # выбор стлобца обработки
        # условие когда выходное изображение еще не сформированно
        if k == 1:
            y9 = X9

        # задержка равна 0 имеется только входное и выходное значение
        if k > 1 and k < j2 + 1:
            y9 = X9 + y9

        # Общее уравнение кадрового рециркулятора
        if k - j2 >= 1:
            y9 = X9 - X9 + y9
    if m == 2:
        y9 = y9  # Матрица после кадрового рециркулятора при М=2

Y10 = np.ones((2, 1))  # Кадровый рециркулятор при М=2
i1 = y9.size[1]  # количесвто стобцов в у0 матрице
j1 = y9.size[0]  # количество строк в у0 матрице
i2 = Y10.size[1]  # колчиество столбцов во Y1 матрице
j2 = Y10.size[0]  # количество строк во Y1 матрице
X10 = np.zeros((j1 + (j2 - 1), i1))  # матрица нулевая
X10 = y9  # матрица у0 окруженная нулями
k = j1 + (j2 - 1)
m = i1
y10 = np.zeros((k, m))
for k in range(1, j1 + (j2 - 1)):  # выбор строки обработки
    for m in range(1, i1):  # выбор стлобца обработки
        # условие когда выходное изображение еще не сформированно
        if k == 1:
            y10 = X10

        # задержка равна 0 имеется только входное и выходное значение
        if k > 1 and k < j2 + 1:
            y10 = X10 + y10

        # Общее уравнение кадрового рециркулятора
        if k - j2 >= 1:
            y10 = X10 - X10 + y10
        if m == 2:
            y10 = y10  # Матрица после кадрового рециркулятора при М=2
S0 = sum(y10)  # сумма каждого столбца
S0 = sum(S0, 2)  # %сумма всех элементов матрицы
if u == 0:
    A = S1 / S0
    A = round(A)
    R = A
    u = 1

# print(p)
i1 = y10.size[1]  # кол-во столбцов в у8
j1 = y10.size[0]
htrans = int(h)  # кол-во строк в у8
Z1 = np.zeros((htrans, 3))  # нулевая матрица размером внешней
Z1 = y10  # итоговая матрица

# -----------------------ПОДЪЕМ ЦЕНТРА--------------------------—

Y11 = np.ones((1, 3))  # вид СР
# X11=A1#добавление коэффициента
i1 = A1  # кол-во столбцов в Х8 матрице
j1 = A1  # кол-во строк в X8 матрице
i2 = Y11.size[1]  # кол-во столбцов в Y8 матрице
j2 = Y11.size[0]
# print(j1, i2-1) # кол-во строк в Y8 матрице
X11 = X8  # Х8 дополненная нулями справа
k = 3
m = 5
y11 = np.zeros((k, m))
for k in range(1, 3):  # выбор строки
    for m in range(1, 5):  # ; % выбор столбца
        if m == 1:
            y11 = X11

        if m > 1 and m < 4:
            y11 = X11 + y11

        if m - 3 >= 1:
            y11 = X11 - X11 + y11

        if m == 2:
            y11 = y11  # матрица после СР

Y12 = np.ones((3, 1))  # % вид КР
i1 = y11.size[1]  # ; % кол-во столбцов в у8 матрице
j1 = y11.size[0]  # % кол-во строк в у8 матрице
i2 = Y12.size[1]  # кол-во столбцов в Y9 матрице
j2 = Y12.size[0]  # кол-во строк в Y9 матрице
X12 = np.zeros((j1 + (j2 - 1), i1))  # нулевая матрица
X12 = y11  # матрица, окруженная нулями
k = j1 + (j2 - 1)
m = i1
y12 = np.zeros((k, m))
for k in range(1, j1 + (j2 - 1)):  # выбор строки
    for m in range(1, i1):  # выбор столбца
        if k == 1:
            y12 = X12

        if k > 1 and k < j2 + 1:
            y12 = X12 + y12

        if k - j2 >= 1:
            y12 = X12 - X12 + y12

    if m == 2:
        y12 = y12  # матрица после КР

# --------------------------------------------------------------—

i1 = y12.size[1]  # кол-во столбцов в у9
j1 = y12.size[0]  # кол-во строк в у9
Z3 = np.zeros((7, 3));  # нулевая матрица размером внешней
Z3 = y12  # итоговая матрица
#
# % %-----------------------КОНЕЧНЫЕ ВЫЧ ?СЛЕН ?Я-------------------------—
A3 = S1 - S0
# W=A1*X A1=3 X=матрица 2 3 с еденицами
W = [[3], [3],
     [3], [3],
     [3], [3]]
# ?сходное изображение домноженное на цоэффициент А2
i1 = 2  # количесвто стобцов в W матрице
j1 = 3  # количество строк в W матрице
q2 = t2 + 1
W0 = np.zeros((i1, j1))  # Нулевая матрица
W0 = W
print("Матрица W0:", W0)
print("Матрица y6:", y6)
print("Матрица Z1:", Z1)
# матрица W окруженная нулями
# rez=(W0+(Z1*A1-y6)+Z1*A);
# disp(rez);
